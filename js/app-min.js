let repositories=JSON.parse(localStorage.getItem("github-repos")||"[]"),repoData=JSON.parse(localStorage.getItem("github-repo-data")||"{}"),selectedRepo=localStorage.getItem("selected-repo")||null,lastUpdate=localStorage.getItem("last-update")||null,settings=JSON.parse(localStorage.getItem("github-settings")||JSON.stringify({compactView:!1,showDescriptions:!0,defaultSort:"stars",defaultRepo:"",theme:"light"})),CACHE_DURATION=9e5;function loadSettings(){const e=document.getElementById("compact-view-toggle"),t=document.getElementById("show-descriptions-toggle"),o=document.getElementById("default-sort"),a=document.getElementById("default-repo");e.classList.toggle("active",settings.compactView),e.setAttribute("aria-checked",settings.compactView.toString()),t.classList.toggle("active",settings.showDescriptions),t.setAttribute("aria-checked",settings.showDescriptions.toString()),o.value=settings.defaultSort,a.value=settings.defaultRepo||""}function initializeTheme(){const e=settings.theme||"light",t=window.matchMedia("(prefers-color-scheme: dark)").matches,o="auto"===e?t?"dark":"light":e;document.documentElement.setAttribute("data-theme",o),updateThemeIcon(o)}function toggleTheme(){const e="dark"===document.documentElement.getAttribute("data-theme")?"light":"dark";document.documentElement.setAttribute("data-theme",e),settings.theme=e,saveSettings(),updateThemeIcon(e),showNotification(`Switched to ${e} theme`,"success")}function updateThemeIcon(e){document.getElementById("theme-icon").innerHTML=`<path d="${"dark"===e?"M12 17q-2.075 0-3.537-1.463Q7 14.075 7 12t1.463-3.538Q9.925 7 12 7t3.538 1.462Q17 9.925 17 12q0 2.075-1.462 3.537Q14.075 17 12 17ZM2 13q-.425 0-.712-.288Q1 12.425 1 12t.288-.713Q1.575 11 2 11h2q.425 0 .713.287Q5 11.575 5 12t-.287.712Q4.425 13 4 13Zm18 0q-.425 0-.712-.288Q19 12.425 19 12t.288-.713Q19.575 11 20 11h2q.425 0 .712.287Q23 11.575 23 12t-.288.712Q22.425 13 22 13Zm-8-8q-.425 0-.712-.288Q11 4.425 11 4V2q0-.425.288-.713Q11.575 1 12 1t.713.287Q13 1.575 13 2v2q0 .425-.287.712Q12.425 5 12 5Zm0 18q-.425 0-.712-.288Q11 21.425 11 21v-2q0-.425.288-.712Q11.575 18 12 18t.713.288Q13 18.575 13 19v2q0 .425-.287.712Q12.425 23 12 23ZM5.65 7.05 4.575 6q-.3-.275-.3-.7 0-.425.3-.725.275-.3.7-.3.425 0 .725.3L7.05 5.65q.275.3.275.7 0 .4-.275.7-.3.275-.7.275-.4 0-.7-.275Zm12.7 12.7L17.3 18.7q-.275-.3-.275-.7 0-.4.275-.7.3-.275.7-.275.4 0 .7.275l1.075 1.05q.3.3.3.725 0 .425-.3.7-.275.3-.7.3-.425 0-.725-.3ZM18.35 7.05q-.3-.275-.3-.7 0-.425.3-.725L19.425 4.6q.3-.3.725-.3.425 0 .7.3.3.275.3.7 0 .425-.3.725L19.775 7.05q-.3.275-.7.275-.4 0-.725-.275ZM5.65 19.75q-.3-.275-.3-.7 0-.425.3-.725L6.7 17.3q.275-.3.7-.3.425 0 .7.3.3.275.3.7 0 .425-.3.725l-1.05 1.075q-.3.3-.725.3-.425 0-.7-.3Z":"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8z"}"/>`}function saveSettings(){localStorage.setItem("github-settings",JSON.stringify(settings))}function updateStatus(e,t="ready"){const o=document.getElementById("status-text"),a=document.querySelector(".status-dot"),s=document.getElementById("update-btn");o.textContent=e,a.className="status-dot",s.disabled=!1,"updating"===t?(a.classList.add("updating"),s.disabled=!0):"error"===t&&a.classList.add("error")}function switchTab(e){document.querySelectorAll(".nav-item").forEach(((e,t)=>{e.classList.remove("active"),e.setAttribute&&(e.setAttribute("aria-selected","false"),e.setAttribute("tabindex","-1"))}));const t=event?.currentTarget||document.querySelector(`.nav-item[onclick*="${e}"]`);t&&(t.classList.add("active"),t.setAttribute&&(t.setAttribute("aria-selected","true"),t.setAttribute("tabindex","0"))),document.querySelectorAll(".tab-content").forEach((e=>e.classList.remove("active"))),document.getElementById(e+"-tab").classList.add("active"),"repos"===e&&repositories.length>0&&loadAllReposData(),announceToScreenReader(`Switched to ${e} tab`)}function announceToScreenReader(e){const t=document.createElement("div");t.setAttribute("aria-live","polite"),t.setAttribute("aria-atomic","true"),t.className="sr-only",t.style.position="absolute",t.style.left="-10000px",t.style.width="1px",t.style.height="1px",t.style.overflow="hidden",t.textContent=e,document.body.appendChild(t),setTimeout((()=>document.body.removeChild(t)),1e3)}async function fetchRepoData(e){const t=extractRepoPath(e);if(!t)return null;try{const e=await fetch(`https://api.github.com/repos/${t}`);if(!e.ok)throw new Error("Repository not found");const o=await e.json();return{name:o.name,full_name:o.full_name,stars:o.stargazers_count,forks:o.forks_count,issues:o.open_issues_count,language:o.language,description:o.description,updated_at:o.updated_at,created_at:o.created_at,url:o.html_url}}catch(e){return null}}function extractRepoPath(e){if(e.includes("github.com")){const t=e.match(/github\.com\/([^\/]+\/[^\/]+)/);return t?t[1]:null}return e.includes("/")?e:null}function isCacheValid(){return!!lastUpdate&&Date.now()-parseInt(lastUpdate)<CACHE_DURATION}function updateCache(e){repoData={...repoData,...e},localStorage.setItem("github-repo-data",JSON.stringify(repoData)),localStorage.setItem("last-update",Date.now().toString()),lastUpdate=Date.now().toString(),updateStatusTime()}function updateHomeTab(e){const t=document.getElementById("main-repo");t.innerHTML=e?`\n                <div class="repo-header">\n                    <div>\n                        <div class="repo-name">${e.full_name}</div>\n                        <div class="repo-description">${e.description||"No description available"}</div>\n                    </div>\n                    <a href="${e.url}" target="_blank" class="repo-link">View on GitHub â†’</a>\n                </div>\n                <div class="star-count">\n                    <svg class="star-icon" viewBox="0 0 24 24">\n                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>\n                    </svg>\n                    <div class="star-number">\n                        <div class="star-main">${e.stars.toLocaleString()}</div>\n                        <div class="star-label">GitHub Stars</div>\n                    </div>\n                </div>\n                <div class="repo-stats">\n                    <div class="stat-item">\n                        <div class="stat-value">${e.forks.toLocaleString()}</div>\n                        <div class="stat-label">Forks</div>\n                    </div>\n                    <div class="stat-item">\n                        <div class="stat-value">${e.issues.toLocaleString()}</div>\n                        <div class="stat-label">Open Issues</div>\n                    </div>\n                    <div class="stat-item">\n                        <div class="stat-value">${e.language||"N/A"}</div>\n                        <div class="stat-label">Language</div>\n                    </div>\n                    <div class="stat-item">\n                        <div class="stat-value">${new Date(e.updated_at).toLocaleDateString()}</div>\n                        <div class="stat-label">Last Updated</div>\n                    </div>\n                </div>\n            `:'\n                    <div class="loading">\n                        <div class="spinner"></div>\n                        Select a repository to track\n                    </div>\n                '}function updateReposTab(e){const t=document.getElementById("repos-grid");if(0===Object.keys(e).length)return void(t.innerHTML='\n                    <div class="loading">\n                        No repositories added yet. Go to Settings to add some!\n                    </div>\n                ');const o=sortRepositories(repositories,e).map((t=>{const o=e[t];if(!o)return"";const a=settings.showDescriptions&&o.description?`<div class="repo-card-description">${o.description}</div>`:"";return`\n                    <div class="repo-card" onclick="selectRepo('${t}')" tabindex="0" role="button" aria-label="Select ${o.full_name} repository" onkeydown="handleRepoCardKeydown(event, '${t}')">\n                        <h3>${o.full_name}</h3>\n                        ${a}\n                        <div class="repo-stars">\n                            <div class="star-info">\n                                <svg class="small-star-icon" viewBox="0 0 24 24" aria-hidden="true">\n                                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>\n                                </svg>\n                                ${o.stars.toLocaleString()}\n                            </div>\n                            ${o.language?`<div class="repo-language">${o.language}</div>`:""}\n                        </div>\n                    </div>\n                `})).join("");t.innerHTML=o}function sortRepositories(e,t){return e.sort(((e,o)=>{const a=t[e],s=t[o];if(!a||!s)return 0;switch(settings.defaultSort){case"stars":return s.stars-a.stars;case"name":return a.full_name.localeCompare(s.full_name);case"updated":return new Date(s.updated_at)-new Date(a.updated_at);case"created":return new Date(s.created_at)-new Date(a.created_at);default:return 0}}))}function updateSettingsList(){const e=document.getElementById("repo-list");if(0===repositories.length)return void(e.innerHTML='<li style="text-align: center; color: #64748b; padding: 20px;">No repositories added yet</li>');const t=repositories.map((e=>{repoData[e];return`\n                    <li class="repo-item">\n                        <div class="repo-info">\n                            <div class="repo-url">${e}</div>\n                            <div class="repo-added">Added ${localStorage.getItem(`repo-added-${e}`)||"Unknown"}</div>\n                        </div>\n                        <button onclick="removeRepository('${e}')" class="btn btn-danger">\n                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">\n                                <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>\n                            </svg>\n                            Remove\n                        </button>\n                    </li>\n                `})).join("");e.innerHTML=t}function addRepository(){const e=document.getElementById("repo-input"),t=e.value.trim();if(!t)return void showNotification("Please enter a repository URL","error");const o=extractRepoPath(t);o?repositories.includes(o)?showNotification("Repository already added","warning"):(repositories.push(o),localStorage.setItem("github-repos",JSON.stringify(repositories)),localStorage.setItem(`repo-added-${o}`,(new Date).toLocaleDateString()),(1===repositories.length||!settings.defaultRepo&&repositories.length>0)&&(selectedRepo=o,localStorage.setItem("selected-repo",selectedRepo)),e.value="",updateSettingsList(),updateDefaultRepoOptions(),showNotification("Repository added successfully!","success"),loadRepoData()):showNotification("Invalid repository URL format","error")}function removeRepository(e){repositories=repositories.filter((t=>t!==e)),localStorage.setItem("github-repos",JSON.stringify(repositories)),delete repoData[e],localStorage.setItem("github-repo-data",JSON.stringify(repoData)),selectedRepo===e&&(selectedRepo=repositories.length>0?repositories[0]:null,localStorage.setItem("selected-repo",selectedRepo||"")),updateSettingsList(),updateDefaultRepoOptions(),showNotification("Repository removed"),loadRepoData()}function selectRepo(e){selectedRepo=e,localStorage.setItem("selected-repo",selectedRepo),switchTab("home"),document.querySelectorAll(".nav-item")[0].click(),loadRepoData()}async function loadRepoData(){if(!selectedRepo)return void updateHomeTab(null);if(updateStatus("Loading...","updating"),isCacheValid()&&repoData[selectedRepo])return updateHomeTab(repoData[selectedRepo]),void updateStatus("Ready");const e=await fetchRepoData(selectedRepo);e?(updateCache({[selectedRepo]:e}),updateHomeTab(e),updateStatus("Updated")):(showNotification("Failed to load repository data","error"),updateStatus("Error","error"))}async function loadAllReposData(){if(document.getElementById("repos-grid").innerHTML='\n                <div class="loading">\n                    <div class="spinner"></div>\n                    Loading repositories...\n                </div>\n            ',updateStatus("Loading repositories...","updating"),isCacheValid()&&repositories.every((e=>repoData[e])))return updateReposTab(repoData),void updateStatus("Ready");const e=repositories.map((async e=>{if(isCacheValid()&&repoData[e])return{[e]:repoData[e]};const t=await fetchRepoData(e);return t?{[e]:t}:{}}));try{const t=await Promise.all(e);updateCache(Object.assign({},...t)),updateReposTab(repoData),updateStatus("Updated")}catch(e){showNotification("Failed to load some repositories","error"),updateReposTab(repoData),updateStatus("Error","error")}}async function forceRefresh(){localStorage.removeItem("last-update"),lastUpdate=null,updateStatus("Refreshing...","updating");const e=document.querySelector(".nav-item.active .nav-label").textContent.toLowerCase();"home"===e?await loadRepoData():"repositories"===e&&await loadAllReposData(),showNotification("Data refreshed successfully!","success")}function toggleCompactView(){const e=document.getElementById("compact-view-toggle");settings.compactView=!settings.compactView,e.classList.toggle("active",settings.compactView),e.setAttribute("aria-checked",settings.compactView.toString()),saveSettings(),showNotification("Compact view "+(settings.compactView?"enabled":"disabled"),"success");"repositories"===document.querySelector(".nav-item.active .nav-label").textContent.toLowerCase()&&updateReposTab(repoData)}function toggleShowDescriptions(){const e=document.getElementById("show-descriptions-toggle");settings.showDescriptions=!settings.showDescriptions,e.classList.toggle("active",settings.showDescriptions),e.setAttribute("aria-checked",settings.showDescriptions.toString()),saveSettings(),showNotification("Descriptions "+(settings.showDescriptions?"shown":"hidden"),"success");"repositories"===document.querySelector(".nav-item.active .nav-label").textContent.toLowerCase()&&updateReposTab(repoData)}function updateDefaultSort(){const e=document.getElementById("default-sort");settings.defaultSort=e.value,saveSettings(),showNotification("Default sort updated","success");"repositories"===document.querySelector(".nav-item.active .nav-label").textContent.toLowerCase()&&updateReposTab(repoData)}function updateDefaultRepo(){const e=document.getElementById("default-repo");settings.defaultRepo=e.value,saveSettings(),e.value?(selectedRepo=e.value,localStorage.setItem("selected-repo",selectedRepo),loadRepoData(),showNotification(`Default repository set to ${e.value}`,"success")):showNotification("Default repository cleared - will use first repository","success")}function updateDefaultRepoOptions(){const e=document.getElementById("default-repo"),t=e.value;e.innerHTML='<option value="">Auto (First Repository)</option>',repositories.forEach((o=>{const a=document.createElement("option");a.value=o,a.textContent=o,o===t&&(a.selected=!0),e.appendChild(a)}))}function handleRepoCardKeydown(e,t){"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),selectRepo(t))}function clearCache(){confirm("Are you sure you want to clear all cached data? This will force a refresh of all repositories.")&&(localStorage.removeItem("github-repo-data"),localStorage.removeItem("last-update"),repoData={},lastUpdate=null,showNotification("Cache cleared successfully","success"),updateStatusTime())}function showNotification(e,t="success"){const o=document.getElementById("notification");o.textContent=e,o.className=`notification ${t}`,o.classList.add("show"),setTimeout((()=>{o.classList.remove("show")}),3e3)}function loadRepositories(){const e=localStorage.getItem("github-repos");e&&(repositories=JSON.parse(e))}function updateStatusTime(){const e=document.getElementById("last-updated");e.textContent=lastUpdate?`Last updated: ${getTimeAgo(parseInt(lastUpdate))}`:""}function getTimeAgo(e){const t=Date.now()-e,o=Math.floor(t/6e4),a=Math.floor(t/36e5),s=Math.floor(t/864e5);return o<1?"just now":o<60?`${o} minute${1!==o?"s":""} ago`:a<24?`${a} hour${1!==a?"s":""} ago`:`${s} day${1!==s?"s":""} ago`}document.addEventListener("DOMContentLoaded",(function(){initializeTheme(),loadRepositories(),loadSettings(),updateDefaultRepoOptions(),repositories.length>0&&(selectedRepo||(selectedRepo=settings.defaultRepo&&repositories.includes(settings.defaultRepo)?settings.defaultRepo:repositories[0],localStorage.setItem("selected-repo",selectedRepo)),loadRepoData()),updateSettingsList(),updateStatus("Ready")})),document.addEventListener("keydown",(function(e){if("INPUT"===e.target.tagName||"TEXTAREA"===e.target.tagName||"SELECT"===e.target.tagName)return;if(e.ctrlKey||e.metaKey)switch(e.key){case"1":e.preventDefault(),document.querySelector('.nav-item[onclick*="home"]').click();break;case"2":e.preventDefault(),document.querySelector('.nav-item[onclick*="repos"]').click();break;case"3":e.preventDefault(),document.querySelector('.nav-item[onclick*="settings"]').click();break;case"r":e.preventDefault(),forceRefresh();break;case"d":e.preventDefault(),toggleTheme();break}const t=document.querySelector(".nav-item.active"),o=Array.from(document.querySelectorAll(".nav-item")),a=o.indexOf(t);"ArrowLeft"===e.key&&a>0?(e.preventDefault(),o[a-1].click(),o[a-1].focus()):"ArrowRight"===e.key&&a<o.length-1&&(e.preventDefault(),o[a+1].click(),o[a+1].focus())})),document.getElementById("repo-input").addEventListener("keydown",(function(e){"Enter"===e.key&&addRepository()})),setInterval(updateStatusTime,6e4),updateStatusTime(),window.addEventListener("online",(function(){showNotification("Connection restored - data will be updated")})),window.addEventListener("offline",(function(){showNotification("You are offline - showing cached data","error")})),"serviceWorker"in navigator&&navigator.serviceWorker.register("data:text/javascript,").catch((()=>{}));